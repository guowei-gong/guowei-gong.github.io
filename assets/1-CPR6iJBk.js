import{_ as c}from"./ValaxyMain.vue_vue_type_style_index_0_lang-CBf5hEqz.js";import{a as h,p as r,o as m,c as _,w as l,f as S,r as n,g as e,h as a}from"./app-BZDWLfP1.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-Be0Mb7hY.js";import"./YunCard.vue_vue_type_script_setup_true_lang-Dhwia5MJ.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-Bqy1HhVw.js";import"./index-C7yU5XnD.js";const p=e("h2",{id:"定义",tabindex:"-1"},[a("定义 "),e("a",{class:"header-anchor",href:"#定义","aria-label":'Permalink to "定义"'},"​")],-1),f=e("p",null,"String 就是字符串，最大为 512 MB。",-1),g=e("h2",{id:"使用场景",tabindex:"-1"},[a("使用场景 "),e("a",{class:"header-anchor",href:"#使用场景","aria-label":'Permalink to "使用场景"'},"​")],-1),R=e("p",null,"存字节数据、文本数据、序列化后的对象数据等。",-1),b=e("h2",{id:"常用操作",tabindex:"-1"},[a("常用操作 "),e("a",{class:"header-anchor",href:"#常用操作","aria-label":'Permalink to "常用操作"'},"​")],-1),k=e("ul",null,[e("li",null,[e("p",null,"创建、更新 语法：SET key value 设置一个 key 的值为 value，成功则返回 OK。")]),e("li",null,[e("p",null,"查询 语法：GET key 查询某个 key，存在就返回对应的 value，不存在返回 nil。")]),e("li",null,[e("p",null,"删除 语法：DEL key [key …] 删除一个或多个 key，返回值为成功删除几行。")])],-1),v=e("h2",{id:"底层实现",tabindex:"-1"},[a("底层实现 "),e("a",{class:"header-anchor",href:"#底层实现","aria-label":'Permalink to "底层实现"'},"​")],-1),D=e("p",null,"三种编码方式，如下。",-1),M=e("ul",null,[e("li",null,"INT，存整型；"),e("li",null,"EMBSTR，如果字符串小于等于阈值字节，使用 EMBSTR 编码；"),e("li",null,"RAW，如果字符串大于阈值字节，使用 RAW 编码。")],-1),T=e("p",null,"3.2 版本前，阈值是 39 字节，之后是 44 字节。",-1),$=e("p",null,"EMBSTR 和 RAW 都由 RedisObject 和 SDS 两个结构组成，区别在于 EMBSTR 下的 RedisObject 和 SDS 是连续内存，RAW 是分开的。",-1),B=e("p",null,"EMBSTR 的优点，可以一次性分配空间，缺点是如果重新分配空间，整体都需要再分配，因此，EMBSTR 设计为只读，任何写操作之后，EMBSTR 都会变为 RAW，理念是发送过修改的字符串通常认为是易变的。",-1),E=e("p",null,"随着我们的操作，编码可能会转换：",-1),y=e("ul",null,[e("li",null,"INT -> RAW：存的内容不再是整数，或者大小超过了 long 类型；"),e("li",null,"EMBSTR -> RAW：写操作之后。")],-1),A=e("p",null,"字符串编码 EMBSTR 和 RAW 都包含了一个叫 SDS 的结构，它是 Simple Dynamic String 的缩写，下面详细介绍 SDS。",-1),W=e("h3",{id:"为什么需要-sds",tabindex:"-1"},[a("为什么需要 SDS "),e("a",{class:"header-anchor",href:"#为什么需要-sds","aria-label":'Permalink to "为什么需要 SDS"'},"​")],-1),P=e("p",null,"在 C 语言中，字符串用一个 '\\0' 结尾的 char 数组表示，但对于 Redis 来说并不好用：",-1),N=e("ul",null,[e("li",null,"对字符串进行追加，需要重新分配内存；"),e("li",null,"每次计算字符串长度的时间复杂度为 O(N)；"),e("li",null,"非二进制安全，二进制安全是指公平对待每一个字符，不特殊处理某个字符。 在 Redis 内部，字符串追加和长度计算很常见，不应该成为性能瓶颈，于是 Redis 封装了一个 SDS 的字符串结构，解决上述问题。")],-1),O=e("p",null,"SDS 的结构中，有两个关键字段，一个是 len，表示已使用的内存；一个是 alloc，表示一共分配了多少内存。alloc - len 的差值就是预留空间大小。通过 SDS 的结构可以看出 SDS 是如何对症下药，解决问题的：",-1),j=e("ol",null,[e("li",null,"增加长度字段 len，快速返回长度；"),e("li",null,"增加预留空间，为后续追加数据留余地；"),e("li",null,"不再以 '\\0' 作为判断标准，二进制安全。")],-1),w=e("p",null,"SDS 的预留空间大小规则如下。",-1),x=e("ul",null,[e("li",null,"len 小于 1M 的情况，alloc = 2*len，即预留 len 大小的空间；"),e("li",null,"len 大于 1M 的情况，alloc = 1M+len，即预留 1M 大小的空间。")],-1),V=e("h2",{id:"常见问题",tabindex:"-1"},[a("常见问题 "),e("a",{class:"header-anchor",href:"#常见问题","aria-label":'Permalink to "常见问题"'},"​")],-1),C=e("ul",null,[e("li",null,"Set 一个已有的数据会发生什么？"),e("li",null,"浮点型在 String 中用什么表示？"),e("li",null,"String 可以有多大？"),e("li",null,"Redis 字符串是怎么实现的？"),e("li",null,"SDS 有什么用？")],-1),H={__name:"1",setup(I,{expose:d}){const i=JSON.parse('{"title":"Redis对象(一) String","description":"","frontmatter":{"title":"Redis对象(一) String","hide":"index","date":"2024-04-01 20:26","updated":"2024-04-01 20:26","categories":"Redis小册"},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"常用操作","slug":"常用操作","link":"#常用操作","children":[]},{"level":2,"title":"底层实现","slug":"底层实现","link":"#底层实现","children":[{"level":3,"title":"为什么需要 SDS","slug":"为什么需要-sds","link":"#为什么需要-sds","children":[]}]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[]}],"relativePath":"pages/posts/redis-booklet/object/1.md","path":"/home/runner/work/guowei-gong.github.io/guowei-gong.github.io/pages/posts/redis-booklet/object/1.md","lastUpdated":1718246058000}'),o=h(),s=i.frontmatter||{};return o.meta.frontmatter=Object.assign(o.meta.frontmatter||{},i.frontmatter||{}),r("pageData",i),r("valaxy:frontmatter",s),globalThis.$frontmatter=s,d({frontmatter:{title:"Redis对象(一) String",hide:"index",date:"2024-04-01 20:26",updated:"2024-04-01 20:26",categories:"Redis小册"}}),(t,J)=>{const u=c;return m(),_(u,{frontmatter:S(s)},{"main-content-md":l(()=>[p,f,g,R,b,k,v,D,M,T,$,B,E,y,A,W,P,N,O,j,w,x,V,C]),"main-header":l(()=>[n(t.$slots,"main-header")]),"main-header-after":l(()=>[n(t.$slots,"main-header-after")]),"main-nav":l(()=>[n(t.$slots,"main-nav")]),"main-content":l(()=>[n(t.$slots,"main-content")]),"main-content-after":l(()=>[n(t.$slots,"main-content-after")]),"main-nav-before":l(()=>[n(t.$slots,"main-nav-before")]),"main-nav-after":l(()=>[n(t.$slots,"main-nav-after")]),comment:l(()=>[n(t.$slots,"comment")]),footer:l(()=>[n(t.$slots,"footer")]),aside:l(()=>[n(t.$slots,"aside")]),"aside-custom":l(()=>[n(t.$slots,"aside-custom")]),default:l(()=>[n(t.$slots,"default")]),_:3},8,["frontmatter"])}}};export{H as default};
