import{_ as h}from"./ValaxyMain.vue_vue_type_style_index_0_lang-CBf5hEqz.js";import{a as p,p as i,o as u,c,w as e,f as m,r as n,g as t,h as _}from"./app-BZDWLfP1.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-Be0Mb7hY.js";import"./YunCard.vue_vue_type_script_setup_true_lang-Dhwia5MJ.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-Bqy1HhVw.js";import"./index-C7yU5XnD.js";const f=t("p",null,"让我们将一条指令映射到机器代码吧。",-1),g=t("p",null,"还记得我们之前提到的寄存器吗？也就是仓库例子中，放在地上的小隔间。我们稍后会更多地讨论它们，现在我们只需要记住它是可以临时存储东西的地方。",-1),k=t("div",{class:"language-shell vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"shell"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[t("code",{"v-pre":""},[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# 将 4 与寄存器 12 中保存的数字相加")]),_(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),t("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," r12,"),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 4"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")])])]),t("button",{class:"collapse"})],-1),C=t("p",null,"首先，CPU 去获取指令。在机器代码中，可能最后展示的结果是一串二进制数，如下。",-1),b=t("p",null,[t("code",null,"00000001 00001100 00000100")],-1),$=t("p",null,"上面这串二进制数字，用十进制表示，如下。",-1),v=t("p",null,[t("code",null,"1 12 4")],-1),U=t("p",null,"当解码器读取其第一个值时，它会寻找要映射到对应的指令。",-1),y=t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"数值"),t("th",null,"指令")])]),t("tbody",null,[t("tr",null,[t("td",null,"1"),t("td",null,"add")]),t("tr",null,[t("td",null,"2"),t("td",null,"sub")]),t("tr",null,[t("td",null,"…"),t("td",null,"…")])])],-1),P=t("p",null,"现在，假设数字 1 映射到指令 add 。",-1),F=t("p",null,"解码器知道 add 指令的第一个参数是：保存的目的地（哪个寄存器）",-1),B=t("p",null,"第二个参数是：要添加的数",-1),T=t("p",null,"解码器看到下一段数据为 12 ，所以它知道它的保存目的地是寄存器 12（ r12 ）。然后它获取 r12 中保存的数字，假设寄存器12（ r12 ）中现在保存了 5。",-1),w=t("p",null,"接下来，解码器获取要添加的数字，即 4 。",-1),A=t("p",null,"最后开始执行。CPU 将存储在寄存器12（ r12 ）中的数字发送到 ALU，ALU 将这两个数字 4、5 的总和发送回 CPU。CPU 从 ALU 中获取此总和并将其保存到寄存器 12 （ r12 ）。完成！",-1),E=t("p",null,'[scode type="green"]现在的 CPU 指令周期不再是一个循环，而是实现了一种称为流水线的东西，即每个指令流，在下一个指令流开始之前结束。',-1),Z=t("p",null,"假设有一个传统的制造工厂，其中有一个仓库存放着原材料，工人从仓库中取出原材料，进行各个制造步骤，最终制成产品。在这个工厂中，每个产品的制造需要经历多个阶段，工人们按顺序完成每个阶段的工作。",-1),D=t("p",null,"现在的工人，就是在一个流水线工程，在流水线工厂中，产品制造被拆分为多个阶段，并在不同位置的工人同时进行不同阶段的工作。每个工人只需要专注于自己的工作，然后将产品传递给下一个工人。",-1),L=t("p",null,"用 CPU 术语中来说，现代 CPU 可以同时获取、解码和执行不同的指令。提高了 CPU 的指令处理效率，从而使 CPU 的运行速度更快。[/scode]",-1),z={__name:"4",setup(N,{expose:r}){const o=JSON.parse('{"title":"汇编小册(四) 指令映射到机器代码","description":"","frontmatter":{"title":"汇编小册(四) 指令映射到机器代码","hide":"index","date":"2023-08-24T00:00:00.000Z","updated":"2023-08-24T00:00:00.000Z","categories":"汇编小册"},"headers":[],"relativePath":"pages/posts/compilation-booklet/4.md","path":"/home/runner/work/guowei-gong.github.io/guowei-gong.github.io/pages/posts/compilation-booklet/4.md","lastUpdated":1718246058000}'),l=p(),a=o.frontmatter||{};return l.meta.frontmatter=Object.assign(l.meta.frontmatter||{},o.frontmatter||{}),i("pageData",o),i("valaxy:frontmatter",a),globalThis.$frontmatter=a,r({frontmatter:{title:"汇编小册(四) 指令映射到机器代码",hide:"index",date:"2023-08-24T00:00:00.000Z",updated:"2023-08-24T00:00:00.000Z",categories:"汇编小册"}}),(s,O)=>{const d=h;return u(),c(d,{frontmatter:m(a)},{"main-content-md":e(()=>[f,g,k,C,b,$,v,U,y,P,F,B,T,w,A,E,Z,D,L]),"main-header":e(()=>[n(s.$slots,"main-header")]),"main-header-after":e(()=>[n(s.$slots,"main-header-after")]),"main-nav":e(()=>[n(s.$slots,"main-nav")]),"main-content":e(()=>[n(s.$slots,"main-content")]),"main-content-after":e(()=>[n(s.$slots,"main-content-after")]),"main-nav-before":e(()=>[n(s.$slots,"main-nav-before")]),"main-nav-after":e(()=>[n(s.$slots,"main-nav-after")]),comment:e(()=>[n(s.$slots,"comment")]),footer:e(()=>[n(s.$slots,"footer")]),aside:e(()=>[n(s.$slots,"aside")]),"aside-custom":e(()=>[n(s.$slots,"aside-custom")]),default:e(()=>[n(s.$slots,"default")]),_:3},8,["frontmatter"])}}};export{z as default};
