import{_ as h}from"./ValaxyMain.vue_vue_type_style_index_0_lang-CBf5hEqz.js";import{a as u,p as r,o as _,c as L,w as e,f as m,r as o,g as t,h as n}from"./app-BZDWLfP1.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-Be0Mb7hY.js";import"./YunCard.vue_vue_type_script_setup_true_lang-Dhwia5MJ.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-Bqy1HhVw.js";import"./index-C7yU5XnD.js";const I=t("h2",{id:"定义",tabindex:"-1"},[n("定义 "),t("a",{class:"header-anchor",href:"#定义","aria-label":'Permalink to "定义"'},"​")],-1),p=t("p",null,"Redis List 是一组连接起来的字符串集合。个数限制是 2^64-1。",-1),f=t("h2",{id:"使用场景",tabindex:"-1"},[n("使用场景 "),t("a",{class:"header-anchor",href:"#使用场景","aria-label":'Permalink to "使用场景"'},"​")],-1),S=t("p",null,"存储一批数据。例如，存储一批任务数据。",-1),T=t("h2",{id:"常用操作",tabindex:"-1"},[n("常用操作 "),t("a",{class:"header-anchor",href:"#常用操作","aria-label":'Permalink to "常用操作"'},"​")],-1),k=t("p",null,"常用操作还是聚焦于创建、查询、更新和删除。",-1),P=t("ul",null,[t("li",null,"写操作相关")],-1),g=t("p",null,"语法：LPUSH key value [value …] 从头部增加元素，返回值为 List 中元素的总数。",-1),v=t("p",null,"语法：RPUSH key value [value …] 从尾部增加元素，返回值为 List 中元素的总数。",-1),b=t("p",null,"语法：LPOP key 移出并获取列表的第一个元素。",-1),N=t("p",null,"语法：RPOP key 移出并获取列表的最后一个元素。",-1),K=t("p",null,"语法：LREM key count value 移出值等于 value 的元素。当 count=0，则移除所有等于 value 的元素。当 count>0，则从左侧开始移除 count 个。当 count<0，则从右到左移除 count 个。返回值为被移除元素的数量。",-1),$=t("p",null,"语法：DEL key [key…] 删除对象，返回值为成功删除了几个键。",-1),y=t("p",null,"语法：UNLINK key [key…] 删除对象。DEL 命令同步删除命令，会阻塞客户端，直到删除完成。UNLINK 命令是异步命令，只是取消 key 在键空间的关联，让其无法查到，删除是异步进行，不会阻塞客户端。",-1),E=t("ul",null,[t("li",null,"读操作相关")],-1),R=t("p",null,"语法：LLEN key 查看 List 的长度，即 List 中元素的总数。",-1),Z=t("p",null,"语法：LRANGE key start stop 查看 start 到 stop 为角标的元素，如果 start、stop 为负数，表示倒数第几个元素。",-1),D=t("h2",{id:"底层实现",tabindex:"-1"},[n("底层实现 "),t("a",{class:"header-anchor",href:"#底层实现","aria-label":'Permalink to "底层实现"'},"​")],-1),U=t("p",null,"3.2 版本之前，List 对象有两种编码方式，一种是 ZIPLIST，另一种是 LINKEDLIST。 当满足以下条件时，用 ZIPLIST 编码：",-1),C=t("ol",null,[t("li",null,"列表对象元素个数少于 512 个；"),t("li",null,"列表对象保存的所有字符串对象长度都小于 64 字节。")],-1),w=t("p",null,"ZIPLIST 底层用压缩列表实现，ZIPLIST 内存排列得很紧凑，因此减少产生内存碎片的可能性，可以有效节约内存空间。",-1),O=t("p",null,"如果不满足 ZIPLIST 编码的条件，则使用 LINKEDLIST 编码，如果用 LINKEDLIST 编码，String 对象之间依靠指针进行链接，也就是以链表的形式。LINKEDLIST 编码，删除更灵活，但内存不如 ZIPLIST 紧凑，所以只有在列表个数或节点数据长度比较大的时候，才会使用 LINKEDLIST 编码，以加快处理速度，一定程度上牺牲了内存。",-1),j=t("p",null,"3.2 版本，引入了 QUICKLIST。QUICKLIST 其实就是 ZIPLIST 和 LINKEDLIST 的结合体。一个 LINKEDLIST，但其节点是 ZIPLIST。 当数据较少的时候，QUICKLIST 的节点就只有一个，其实相当于就是一个 ZIPLIST；当数据较多的时候，则同时利用 ZIPLIST 和 LINKEDLIST 的优势。",-1),A=t("p",null,"ZIPLIST 本身存在一个连锁更新的问题，所以 Redis 7.0 之后，使用了 LISTPACK 的编码模式取代了 ZIPLIST，而它们其实本质都是一种压缩的列表，即用处都是一样的，实现细节不一样而已。",-1),B=t("p",null,"ZIPLIST 的细节，以及 LISTPACK 是怎么优化的，将在下一节介绍。",-1),Q=t("h2",{id:"常见问题",tabindex:"-1"},[n("常见问题 "),t("a",{class:"header-anchor",href:"#常见问题","aria-label":'Permalink to "常见问题"'},"​")],-1),V=t("p",null,"面试的考察点集中在 List 常规操作和底层实现。常规操作熟练掌握，底层实现要了解其编码方式，以及一些基本的实现细节。",-1),x=t("ul",null,[t("li",null,"List 是完全先入先出吗？ 提示：双端操作对象。"),t("li",null,"List 对象底层编码方式是什么？ 提示：Redis 3.2 版本之前和之后，List 对象底层编码方式是不同的。但是切记不要背这些版本的实现，这样会让面试官觉得你完全是背，没有理解，没有实践，这会减分。最好先说下自己用的哪个版本。")],-1),Y={__name:"2",setup(H,{expose:d}){const a=JSON.parse('{"title":"Redis对象(二) List","description":"","frontmatter":{"title":"Redis对象(二) List","hide":"index","date":"2024-04-08 20:18","updated":"2024-04-08 20:18","categories":"Redis小册"},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"常用操作","slug":"常用操作","link":"#常用操作","children":[]},{"level":2,"title":"底层实现","slug":"底层实现","link":"#底层实现","children":[]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[]}],"relativePath":"pages/posts/redis-booklet/object/2.md","path":"/home/runner/work/guowei-gong.github.io/guowei-gong.github.io/pages/posts/redis-booklet/object/2.md","lastUpdated":1718246058000}'),i=u(),l=a.frontmatter||{};return i.meta.frontmatter=Object.assign(i.meta.frontmatter||{},a.frontmatter||{}),r("pageData",a),r("valaxy:frontmatter",l),globalThis.$frontmatter=l,d({frontmatter:{title:"Redis对象(二) List",hide:"index",date:"2024-04-08 20:18",updated:"2024-04-08 20:18",categories:"Redis小册"}}),(s,G)=>{const c=h;return _(),L(c,{frontmatter:m(l)},{"main-content-md":e(()=>[I,p,f,S,T,k,P,g,v,b,N,K,$,y,E,R,Z,D,U,C,w,O,j,A,B,Q,V,x]),"main-header":e(()=>[o(s.$slots,"main-header")]),"main-header-after":e(()=>[o(s.$slots,"main-header-after")]),"main-nav":e(()=>[o(s.$slots,"main-nav")]),"main-content":e(()=>[o(s.$slots,"main-content")]),"main-content-after":e(()=>[o(s.$slots,"main-content-after")]),"main-nav-before":e(()=>[o(s.$slots,"main-nav-before")]),"main-nav-after":e(()=>[o(s.$slots,"main-nav-after")]),comment:e(()=>[o(s.$slots,"comment")]),footer:e(()=>[o(s.$slots,"footer")]),aside:e(()=>[o(s.$slots,"aside")]),"aside-custom":e(()=>[o(s.$slots,"aside-custom")]),default:e(()=>[o(s.$slots,"default")]),_:3},8,["frontmatter"])}}};export{Y as default};
