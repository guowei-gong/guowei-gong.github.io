import{_ as h}from"./ValaxyMain.vue_vue_type_style_index_0_lang-CBf5hEqz.js";import{a as p,p as r,o as u,c as g,w as e,f as k,r as n,g as t,h as s}from"./app-BZDWLfP1.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-Be0Mb7hY.js";import"./YunCard.vue_vue_type_script_setup_true_lang-Dhwia5MJ.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-Bqy1HhVw.js";import"./index-C7yU5XnD.js";const m=t("p",null,[s("如果您以前写过 "),t("code",null,"Golang"),s(" ，那您很可能见过或者写过 "),t("code",null,"Struct"),s(" 结构体。但是，您可能不知道，通过简单地重新排序结构体中的字段，您可以极大地提高 Go 程序的速度和内存使用率！")],-1),_=t("p",null,"难以置信吗？那让我们直接进入正题吧！让我们来看一个例子。如下。",-1),E=t("div",{class:"language-go vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"go"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[t("code",{"v-pre":""},[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"type"),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," BadStruct"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," struct"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    age          "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"uint8")]),s(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    IdCardNumber "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"uint64")]),s(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    DateOfBirth  "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"uint16")]),s(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),t("span",{class:"line"}),s(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"type"),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," GoodStruct"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," struct"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    age          "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"uint8")]),s(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    DateOfBirth  "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"uint16")]),s(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    IdCardNumber "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"uint64")]),s(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])]),t("button",{class:"collapse"})],-1),y=t("p",null,[s("在上面的例子中，我们定义了两个具有相同字段的结构体。接下来让我们编写一个简单的程序来输出他们的内存使用情况。点击"),t("a",{href:"https://go.dev/play/p/DekLCtTGo6v",target:"_blank",rel:"noreferrer"},"此处"),s("您可以获取测试代码。")],-1),f=t("div",{class:"language- vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"}),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[t("code",{"v-pre":""},[t("span",{class:"line"},[t("span",null,"Bad struct is 24 bytes long")]),s(`
`),t("span",{class:"line"},[t("span",null,"Good struct is 16 bytes long")])])]),t("button",{class:"collapse"})],-1),b=t("p",null,"如您所见，它们占用的内存不同。",-1),v=t("p",null,"到底发生了什么，导致两个字段相同的结构体消耗不同的字节？",-1),B=t("p",null,"答案是数据在操作系统中的内存排列方式。换句话说，数据结构对齐。",-1),A=t("p",null,[t("code",null,"CPU"),s(" 以字长的方式读取数据，而不是通过字节大小。64 位操作系统中一个字长为 8 个字节，而 32 位操作系统中一个字长为 4 个字节。换句话说，"),t("code",null,"CPU"),s(" 以字长的倍数读取地址。")],-1),D=t("figure",null,[t("img",{src:"https://weizicoding-1318098637.cos.ap-chengdu.myqcloud.com/0%E7%A7%92%E6%94%B9struct%E6%80%A7%E8%83%BD/picture-01.png",alt:"",loading:"lazy",decoding:"async"})],-1),C=t("p",null,[s("在 64 位操作系统中，为了获取变量 "),t("code",null,"IdCardNumber"),s("，我们的 "),t("code",null,"CPU"),s(" 需要两个周期来访问数据，而不是一个周期。")],-1),F=t("p",null,"第一个周期将获取到 0 到 7 的内存，其余周期获取其余部分。",-1),$=t("p",null,[s("把它想象成一个笔记本，每页只能存储一个字大小的数据，此时是 8 个字节。如果 "),t("code",null,"IdCardNumber"),s(" 分散在两个页面上，则需要翻页两次才能检索完整的数据。")],-1),G=t("p",null,[t("strong",null,"这是低效的。")],-1),S=t("p",null,"因此我们需要对齐数据结构，即将数据存储在一个地址等于数据大小的倍数的位置。",-1),w=t("p",null,"例如，一个 2 字节的数据可以存储在内存 0、2 或 4 中，而一个 4 字节的数据可以存储在内存 0、4 或 8 中。",-1),z=t("figure",null,[t("img",{src:"https://weizicoding-1318098637.cos.ap-chengdu.myqcloud.com/0%E7%A7%92%E6%94%B9struct%E6%80%A7%E8%83%BD/picture-02.png",alt:"",loading:"lazy",decoding:"async"})],-1),N=t("p",null,[s("通过简单的对齐数据，确保 "),t("code",null,"IdCardNumber"),s(" 可以在同一个 "),t("code",null,"CPU"),s(" 周期内检索到变量。")],-1),T=t("p",null,"填充是实现数据对齐的关键。操作系统在数据结构之间用额外的字节填充数据以对齐它们。这就是额外内存的来源！",-1),P=t("p",null,[s("让我们再来看一看 "),t("code",null,"BadStruct"),s(" 和 "),t("code",null,"GoodStruct"),s("。")],-1),I=t("figure",null,[t("img",{src:"https://weizicoding-1318098637.cos.ap-chengdu.myqcloud.com/0%E7%A7%92%E6%94%B9struct%E6%80%A7%E8%83%BD/picture-03.png",alt:"",loading:"lazy",decoding:"async"})],-1),U=t("p",null,[t("code",null,"GoodStruct"),s(" 消耗更少的内存，仅仅是因为它比 "),t("code",null,"BadStruct"),s(" 有更好的结构体字段顺序。")],-1),q=t("p",null,"由于填充，两个数据结构分别变成了 16 字节和 24 字节。",-1),O=t("p",null,"所以，您只需重新排序结构体中的字段，就可以节省额外的内存！",-1),V=t("p",null,[s("最后，让我们来做一个简单你的基准测试来证明它在速度和内存的区别，结果如下。点击"),t("a",{href:"https://go.dev/play/p/i6F3VRFY61n",target:"_blank",rel:"noreferrer"},"此处"),s("您可以获取可运行的代码。")],-1),Z=t("figure",null,[t("img",{src:"https://weizicoding-1318098637.cos.ap-chengdu.myqcloud.com/0%E7%A7%92%E6%94%B9struct%E6%80%A7%E8%83%BD/picture-04.png",alt:"",loading:"lazy",decoding:"async"})],-1),R=t("p",null,[s("从结果您可以看出，遍历 "),t("code",null,"GoodStruct"),s(" 花费的时间确实更少。重新排序结构体字段可以提高程序的内存使用率和速度。")],-1),j=t("h1",{id:"总结",tabindex:"-1"},[s("总结 "),t("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),J=t("p",null,[s("本篇博客带您了解了简单的数据对齐技术，"),t("strong",null,"重新排序结构体中你的字段吧！"),s(" 数据结构的深思熟虑的对齐真的得到了回报。")],-1),tt={__name:"change-struct-performace-directly",setup(L,{expose:c}){const a=JSON.parse('{"title":"0秒改struct性能直接提升15%，产品姐姐都夸我好棒","description":"","frontmatter":{"title":"0秒改struct性能直接提升15%，产品姐姐都夸我好棒","date":"2022-08-17T00:00:00.000Z","updated":"2022-08-17T00:00:00.000Z","categories":"编程语言","tags":["Go"]},"headers":[],"relativePath":"pages/posts/change-struct-performace-directly.md","path":"/home/runner/work/guowei-gong.github.io/guowei-gong.github.io/pages/posts/change-struct-performace-directly.md","lastUpdated":1718246058000}'),o=p(),l=a.frontmatter||{};return o.meta.frontmatter=Object.assign(o.meta.frontmatter||{},a.frontmatter||{}),r("pageData",a),r("valaxy:frontmatter",l),globalThis.$frontmatter=l,c({frontmatter:{title:"0秒改struct性能直接提升15%，产品姐姐都夸我好棒",date:"2022-08-17T00:00:00.000Z",updated:"2022-08-17T00:00:00.000Z",categories:"编程语言",tags:["Go"]}}),(i,Y)=>{const d=h;return u(),g(d,{frontmatter:k(l)},{"main-content-md":e(()=>[m,_,E,y,f,b,v,B,A,D,C,F,$,G,S,w,z,N,T,P,I,U,q,O,V,Z,R,j,J]),"main-header":e(()=>[n(i.$slots,"main-header")]),"main-header-after":e(()=>[n(i.$slots,"main-header-after")]),"main-nav":e(()=>[n(i.$slots,"main-nav")]),"main-content":e(()=>[n(i.$slots,"main-content")]),"main-content-after":e(()=>[n(i.$slots,"main-content-after")]),"main-nav-before":e(()=>[n(i.$slots,"main-nav-before")]),"main-nav-after":e(()=>[n(i.$slots,"main-nav-after")]),comment:e(()=>[n(i.$slots,"comment")]),footer:e(()=>[n(i.$slots,"footer")]),aside:e(()=>[n(i.$slots,"aside")]),"aside-custom":e(()=>[n(i.$slots,"aside-custom")]),default:e(()=>[n(i.$slots,"default")]),_:3},8,["frontmatter"])}}};export{tt as default};
